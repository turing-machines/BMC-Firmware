# SPDX-License-Identifier: GPL-2.0+
# Copyright (C) 2023 Sam Edwards <CFSworks@gmail.com>
# Copyright (C) 2024 Sven Rademakers <sven@turingpi.com>

###############################################################################
############################### EEPROM TOOLS ##################################
###############################################################################
# 0x1100 2.4.0
# 0x1140 2.5.0
# 0x1141 2.5.1
eeprom_ver=0x1141

# this variable writes ${eeprom_ver} to the EEPROM.
# Secondly, it will reset the first 2 bytes to 0xFFFF
burn_eeprom=\
env set _crc_offset 2;\
env set _hdr_offset 6;\
env set _hw_offset 8;\
env set _board_info_len 2a;\
setexpr _crc_len ${_board_info_len} - ${_hdr_offset};\
i2c read 0x50 0 ${_board_info_len} ${tempaddr_r};\
mw.b ${tempaddr_r} 0xff 2;\
setexpr _hw_offset ${tempaddr_r} + ${_hw_offset};\
setexpr _crc_offset ${tempaddr_r} + ${_crc_offset};\
setexpr _hdr_offset ${tempaddr_r} + ${_hdr_offset};\
mw ${_hw_offset} ${eeprom_ver} 1;\
crc32 ${_hdr_offset} ${_crc_len} ${_crc_offset};\
i2c write ${tempaddr_r} 0x50 0 ${_board_info_len};\
env delete _crc_offset _hdr_offset _hw_offset _board_info_len _crc_len;\
reset

###############################################################################
############################### ETHERNET SWITCH ###############################
###############################################################################

ethsw_do_init=run ethsw_do_reset; run ethsw_do_isolate

ethsw_reset_pin=PG13
ethsw_do_reset=gpio clear ${ethsw_reset_pin}; sleep 0.05;\
	gpio input ${ethsw_reset_pin}; sleep 0.15

# The Ethernet switch's port isolation table is a binary matrix mapping input
# port to output port, with a '1' to allow traffic to flow and '0' to block.
#
# So, port O will NOT retransmit traffic received on port I if:
# port[I] & (1<<O) == 0
#
# The default is to allow only 4<->{5,6}; in other words, the BMC's port may
# communicate with either RJ45 port, but the RJ45 ports are not bridged.
# This is important in case the user has their TP2 set up as a firewall,
# gateway, or in some other network-separation capacity.
ethsw_isolation=00 00 00 00 60 10 10

ethsw_do_isolate=i2c dev 0;\
	env set _reg_addr a208;\
	for port in ${ethsw_isolation}; do;\
		mw.w ${tempaddr_r} ${port};\
		i2c write ${tempaddr_r} 5c ${_reg_addr}.2 2 -s;\
		setexpr _reg_addr ${_reg_addr} + 100;\
	done;\
	env delete _reg_addr

###############################################################################
############################### RECOVERY BUTTON ###############################
###############################################################################

rkey_button=key1
rkey_delay=7

rkey_do_poll=bootmode=normalboot;\
	env set _rkey_held 0;\
	echo -n "Button ${rkey_button} state: ";\
	while button ${rkey_button}; do;\
		bootmode=safemode;\
		setexpr _rkey_held ${_rkey_held} + 1;\
		sleep 1;\
	done;\
	if test 0x${_rkey_held} -gt ${rkey_delay}; then;\
		bootmode=recovery;\
	fi;\
	env delete _rkey_held

###############################################################################
################################### BOOTING ###################################
###############################################################################

# Booting involves searching the various partitions/subvolumes of a device for
# boot scripts and running them in turn until one of them takes over and loads
# a kernel. The following shell variables need to be set first:
# devtype, devnum, distro_bootpart, distro_bootpart_uuid (if GPT)

# Since we only try to boot from the device that U-Boot itself loaded up from,
# we set the devtype+devnum accordingly, at preboot time:
devtype_do_detect=devnum=0;\
	devtype=ubi;\
	if test -n ${fel_booted}; then;\
		devtype=fel;\
	fi;\
	if test -n ${mmc_bootdev}; then;\
		devtype=mmc;\
		devnum=${mmc_bootdev};\
	fi

# The user may want to override `bootcmd`, so the default is kept here instead
distro_bootcmd=\
echo Boot device: ${devtype};\
echo Boot mode: ${bootmode};\
bling=$;\
env set _get_boot_targets boot_targets=${bling}{boot_targets_${devtype}_${bootmode}};\
run _get_boot_targets;\
env delete _get_boot_targets;\
for target in ${boot_targets} ${boot_targets_recovery};\
	do run bootcmd_${target};\
done

# This runs when a filesystem is identified, and scans for a bootable script
# therein, returning if the script did not boot a kernel
boot_paths=/boot/boot.scr.uimg /boot.scr.uimg
boot_do_scan=\
echo Scanning ${devtype} ${devnum}:${distro_bootpart}...;\
for path in ${boot_paths}; do;\
	if test -e ${devtype} ${devnum}:${distro_bootpart} ${path}; then;\
		echo Running U-Boot script: ${path};\
		load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${path};\
		source ${scriptaddr};\
		echo SCRIPT FAILED: Continuing;\
	fi;\
done


# Unlike standard distro_bootcmd, we have different boot_targets per U-Boot's
# bootstrap device and per bootmode (i.e. recovery button input at poweron)
boot_targets_mmc_normalboot=nextboot partitions
boot_targets_mmc_safemode=partitions
boot_targets_ubi_normalboot=nextboot ubi_primary ubi_secondary
boot_targets_ubi_safemode=ubi_primary ubi_secondary
boot_targets_fel_normalboot=fel
boot_targets_fel_safemode=fel

# The `nextboot` env var, if set, runs only once, on the next (normal) boot.
# We also want U-Boot to save its environment on first boot so that the OS is
# able to make modifications. Since clearning `nextboot` triggers a save, the
# easiest way to do this is just to give `nextboot` a default value.
nextboot=echo This is the first boot
bootcmd_nextboot=if test -n ${nextboot}; then;\
	saved_nextboot=${nextboot};\
	env delete nextboot;\
	env save;\
	env set _nextboot ${saved_nextboot};\
	run _nextboot;\
fi

# When loading off of the bootable partitions, just scan each bootable one
bootcmd_partitions=part list ${devtype} ${devnum} -bootable devplist;\
	for distro_bootpart in ${devplist}; do;\
		part uuid ${devtype} ${devnum}:${distro_bootpart} distro_bootpart_uuid;\
		run boot_do_scan;\
		env delete distro_bootpart_uuid;\
	done;\
	env delete devplist

# UBI boot is easy, just scan the specified subvols
ubi_subvol_primary=rootfs
ubi_subvol_secondary=rootfs_prev
bootcmd_ubi_primary=distro_bootpart=${ubi_subvol_primary}; run boot_do_scan
bootcmd_ubi_secondary=distro_bootpart=${ubi_subvol_secondary}; run boot_do_scan

# If U-Boot loaded via FEL, also check to see if a script was provided:
bootcmd_fel=if test -n ${fel_scriptaddr}; then;\
	echo '(FEL boot)';\
	source ${fel_scriptaddr};\
fi

# A general-purpose "ask DHCP for address and filename, fetch filename over
# TFTP, execute it as a U-Boot script" boot step, mostly used in recovery.
bootcmd_dhcp=if dhcp; then source ${loadaddr}; fi

###############################################################################
################################ RECOVERY MODE ################################
###############################################################################

# If booting from MMC, just serve the MMC contents as UMS. This is convenient
# for users who might otherwise have a hard time reaching the microSD slot.
bootcmd_ums_mmc=if test ${devtype} = mmc; then;\
	ums 0 ${devtype} ${devnum};\
fi

# This just enables NetConsole. We don't do this normally; it's a security
# risk. But if we get late into recovery mode with nothing else working, this
# becomes our best option.
bootcmd_enable_nc=if test -z ${ipaddr}; then;\
		linklocal;\
	fi;\
	setenv ncip 255.255.255.255;\
	setenv stdout nc;\
	setenv stdin nc;

boot_targets_recovery=ums_mmc dhcp enable_nc

###############################################################################
################################### GENERAL ###################################
###############################################################################

# Addresses where things may be loaded:
kernel_addr_r=0x41000000
tempaddr_r=0x41780000
fdt_addr_r=0x41800000
scriptaddr=0x41900000
pxefile_addr_r=0x41A00000
fdtoverlay_addr_r=0x41B00000
ramdisk_addr_r=0x41C00000
loadaddr=0x42000000

# Not sure where else this belongs:
fel_do_enter=mw.l 07090108 5aa5a55a; reset

# The actual entry point to all this stuff:
preboot=run ethsw_do_isolate; run rkey_do_poll; run devtype_do_detect
bootdelay=2
bootcmd=run distro_bootcmd
